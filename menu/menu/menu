#!/bin/bash
clear

# ======================== COLORS ========================
RED='\033[0;31m'
BRED='\033[1;31m'
NC='\033[0m'
Lgreen='\033[92m'
YELL='\033[0;33m'
CYAN='\033[96m'
PURPLE='\033[35m'
z="\033[95;1m"

# ======================== SYSTEM INFO ========================
ISP=$(cat /etc/xray/isp)
CITY=$(cat /etc/xray/city)
IPVPS=$(curl -s ipv4.icanhazip.com)
domain=$(cat /etc/xray/domain)
RAM=$(free -m | awk 'NR==2 {print $2}')
USAGERAM=$(free -m | awk 'NR==2 {print $3}')
MEMOFREE=$(printf '%-1s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
LOADCPU=$(printf '%-0.00001s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
MODEL=$(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')
CORE=$(printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)")
DATEVPS=$(date +'%d-%m-%Y')
TIMEZONE=$(printf '%(%H-%M-%S)T')
SERONLINE=$(uptime -p | cut -d " " -f 2-10000)
clear
MYIP=$(curl -sS ipv4.icanhazip.com)
echo ""
izinsc="https://raw.githubusercontent.com/sshmax07/izin/main/izin"
# USERNAME
rm -f /usr/bin/user
username=$(curl ${izinsc} | grep $MYIP | awk '{print $2}')
echo "$username" >/usr/bin/user
# validity
rm -f /usr/bin/e
valid=$(curl ${izinsc} | grep $MYIP | awk '{print $3}')
echo "$valid" >/usr/bin/e
# DETAIL ORDER
username=$(cat /usr/bin/user)
oid=$(cat /usr/bin/ver)
exp=$(cat /usr/bin/e)
clear
# CERTIFICATE STATUS
d1=$(date -d "$valid" +%s)
d2=$(date -d "$today" +%s)
certifacate=$(((d1 - d2) / 86400))
# VPS Information
DATE=$(date +'%Y-%m-%d')
datediff() {
    d1=$(date -d "$1" +%s)
    d2=$(date -d "$2" +%s)
    echo -e "$COLOR1 $NC Expiry In   : $(( (d1 - d2) / 86400 )) Days"
}
mai="datediff "$Exp" "$DATE""

# Status Expired Or Active
Info="(${green}Active${NC})"
Error="(${RED}Expired${NC})"
today=`date -d "0 days" +"%Y-%m-%d"`
Exp1=$(curl ${izinsc} | grep $MYIP | awk '{print $3}')
if [[ $today < $Exp1 ]]; then
sts="${Info}"
else
sts="${Error}"
fi
clear

# OS Uptime
uptime="$(uptime -p | cut -d " " -f 2-10)"

# Interface vnstat
interface1="$(ifconfig | awk 'NR==1 {sub(/:$/, "", $1); print $1}')"

# Download/Upload today
dtoday="$(vnstat -i "$interface1" | grep "today" | awk '{print $2" "substr ($3, 1, 1)}')"
utoday="$(vnstat -i "$interface1" | grep "today" | awk '{print $5" "substr ($6, 1, 1)}')"
ttoday="$(vnstat -i "$interface1" | grep "today" | awk '{print $8" "substr ($9, 1, 1)}')"

# Download/Upload yesterday
dyest="$(vnstat -i "$interface1" | grep "yesterday" | awk '{print $2" "substr ($3, 1, 1)}')"
uyest="$(vnstat -i "$interface1" | grep "yesterday" | awk '{print $5" "substr ($6, 1, 1)}')"
tyest="$(vnstat -i "$interface1" | grep "yesterday" | awk '{print $8" "substr ($9, 1, 1)}')"

# Getting CPU Information
cpu_usage1="$(ps aux | awk 'BEGIN {sum=0} {sum+=$3}; END {print sum}')"
cpu_usage="$((${cpu_usage1/\.*} / ${coREDiilik:-1}))"
cpu_usage+=" %"
ISP=$(curl -s ipinfo.io/org | cut -d " " -f 2-10 )
CITY=$(curl -s ipinfo.io/city )
WKT=$(curl -s ipinfo.io/timezone )
DAY=$(date +%A)
DATE=$(date +%m/%d/%Y)
DATE2=$(date -R | cut -d " " -f -5)

# IPVPS=$(curl -s ipinfo.io/ip )
IPVPS=$(curl -sS ipv4.icanhazip.com) 
cname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo )
cores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )
freq=$( awk -F: ' /cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo )
tram=$( free -m | awk 'NR==2 {print $2}' )
uram=$( free -m | awk 'NR==2 {print $3}' )
fram=$( free -m | awk 'NR==2 {print $4}' )
clear
ssh_service=$(/etc/init.d/ssh status | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
dropbear_service=$(/etc/init.d/dropbear status | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
haproxy_service=$(systemctl status haproxy | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
xray_service=$(systemctl status xray | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
nginx_service=$(systemctl status nginx | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
#Status
clear
# STATUS SERVICE  SSH 
if [[ $ssh_service == "running" ]]; then 
   status_ssh="${Lgreen}ON${NC}"
else
   status_ssh="${RED}OFF${NC}"
fi

# SSH Websocket Proxy
ssh_ws=$( systemctl status ws | grep Active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g' )
if [[ $ssh_ws == "running" ]]; then
    status_ws_epro="${Lgreen}ON${NC}"
else
    status_ws_epro="${RED}OFF${NC}"
fi

# STATUS SERVICE HAPROXY
if [[ $haproxy_service == "running" ]]; then 
   status_haproxy="${Lgreen}ON${NC}"
else
   status_haproxy="${RED}OFF${NC}"
fi

# STATUS SERVICE XRAY
if [[ $xray_service == "running" ]]; then 
   status_xray="${Lgreen}ON${NC}"
else
   status_xray="${RED}OFF${NC}"
fi

# STATUS SERVICE NGINX
if [[ $nginx_service == "running" ]]; then 
   status_nginx="${Lgreen}ON${NC}"
else
   status_nginx="${RED}OFF${NC}"
fi

# STATUS SERVICE Dropbear
if [[ $dropbear_service == "running" ]]; then 
   status_dropbear="${Lgreen}ON${NC}"
else
   status_dropbear="${RED}OFF${NC}"
fi

# // Log account
vlx=$(grep -c -E "^#& " "/etc/xray/config.json")
let vla=$vlx/2
vmc=$(grep -c -E "^### " "/etc/xray/config.json")
let vma=$vmc/2
ssh1="$(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd | wc -l)"
trx=$(grep -c -E "^#! " "/etc/xray/config.json")
let trb=$trx/2
ssx=$(grep -c -E "^#!# " "/etc/xray/config.json")
let ssa=$ssx/2
xi="jq -r"
goi=".[0].running_totals.ongoing"
bil=$(curl -s "https://api.idcloudhost.com/v1/payment/billing_account/list" \
-H "apikey: Qtrlz3oC586wmTzojMtQvwSajCFuYu2W" -X GET | $xi "$goi")
a="ACCOUNT PREMIUM" 
KANAN="\033[1;32m<\033[1;33m<\033[1;31m<\033[1;31m${NC}"
KIRI="\033[1;32m>\033[1;33m>\033[1;31m>\033[1;31m${NC}"

clear
echo -e " \033[92m╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\033[0m"
echo -e "        $Lgreen ⇲ $NC${YELL} System OS ${NC}     $Lgreen=${NC}${YELL}  $MODEL${NC}"
echo -e "        $Lgreen ⇲ $NC${YELL} Server RAM ${NC}    $Lgreen=${NC}${YELL}  $tram MB $NC"
echo -e "        $Lgreen ⇲ $NC${YELL} Core Cpu ${NC}      $Lgreen=${NC}${YELL}  $CORE${NC}${YELL} CPU${NC}"
echo -e "        $Lgreen ⇲ $NC${YELL} Uptime Server ${NC} $Lgreen=${NC}${YELL}  $SERONLINE${NC}"
echo -e " \033[92m╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯\033[0m"
echo -e "           \033[35m┌─────────────────────────────────────┐ \033[0m"
echo -e "                  🇯​​🇳​ ​🇸​​🇹​​🇴​​🇷​​🇪​ ​🇻​​🇵​​🇳​"
echo -e "           \033[35m└─────────────────────────────────────┘ \033[0m"
echo -e "   \033[92m◈━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━◈ \033[0m"
echo -e "            ${YELL}SSHWS${NC}  $y=$NC ${Lgreen}$ssh1$NC    ${YELL}VMESS${NC}  $y=$NC ${Lgreen}$vma$NC    ${YELL}VLESS${NC} $y=$NC ${Lgreen}$vla$NC"
echo -e "            ${YELL}TROJAN${NC} $y=$NC ${Lgreen}$trb$NC    ${YELL}SHADOW${NC} $y=$NC ${Lgreen}$ssa$NC    ${YELL}NOOBZ${NC} $y=$NC ${Lgreen}$ssa${NC}"
echo -e "   \033[92m◈━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━◈ \033[0m"
echo -e " \033[92m╭━━━━━━━━━━━━━━━━━╮╭━━━━━━━━━━━━━━━━━━━╮╭━━━━━━━━━━━━━━━━━━╮\033[0m"
echo -e "    SSH$NC : $status_ssh" "          NGINX$NC : $status_nginx" "          XRAY$NC : $status_xray     $NC${z}$NC" 
echo -e "     WS-ePRO$NC : $status_ws_epro" "      DROPBEAR$NC : $status_dropbear" "       HAPROXY$NC : $status_haproxy  $NC${z}$NC" 
echo -e " \033[92m╰━━━━━━━━━━━━━━━━━╯╰━━━━━━━━━━━━━━━━━━━╯╰━━━━━━━━━━━━━━━━━━╯\033[0m"
echo -e "   \033[92m◈━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━◈ \033[0m"
echo -e "           $NC [${YELL}01${NC}]$Lgreen MENU SSH$NC      ${z} $NC [${YELL}06${NC}]$Lgreen MENU NOOBZVPN$NC  ${z}$NC"
echo -e "           $NC [${YELL}02${NC}]$Lgreen MENU VMESS$NC    ${z} $NC [${YELL}07${NC}]$Lgreen RESTART SERVICE$NC ${z}$NC"
echo -e "           $NC [${YELL}03${NC}]$Lgreen MENU VLESS$NC    ${z} $NC [${YELL}08${NC}]$Lgreen MENU SYSTEM$N$NC ${z} $NC"
echo -e "           $NC [${YELL}04${NC}]$Lgreen MENU TROJAN$NC   ${z} $NC [${YELL}09${NC}]$Lgreen MENU BACKUP$NC ${z} $NC"
echo -e "           $NC [${YELL}05${NC}]$Lgreen MENU SSWS$NC     ${z} $NC [${YELL}10${NC}]$Lgreen MENU UPDATE$NC ${z} $NC"
echo -e "   \033[92m◈━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━◈ \033[0m"
echo -e "           \033[35m┌─────────────────────────────────────┐ \033[0m"
echo -e "             HARI INI${NC} ${Lgreen}$ttoday$NC KEMARIN${NC} ${Lgreen}$tyest$NC"
echo -e "           \033[35m└─────────────────────────────────────┘ \033[0m"
echo -e " \033[92m╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\033[0m"
echo -e "        $NC$Lgreen ⇲ ${NC}${YELL} DOMAIN ${NC}        $Lgreen=${NC}${YELL}  $domain${NC}"
echo -e "        $NC$Lgreen ⇲ ${NC}${YELL} IP ADDRESS ${NC}    $Lgreen=${NC}${YELL}  $IPVPS${NC}"
echo -e "        $NC$Lgreen ⇲ ${NC}${YELL} USER ${NC}          $Lgreen=${NC}${YELL}  $username"
echo -e "        $NC$Lgreen ⇲ ${NC}${YELL} EXP SCRIPT ${NC}    $Lgreen=${NC}${YELL}  $exp${YELL} $certifacate Days"
echo -e "        $NC$Lgreen ⇲ ${NC}${YELL} BILLING ${NC}       $Lgreen=${NC}${YELL}  $bil${NC}"
echo -e " \033[92m╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯\033[0m"
echo -e ""
read -p " MENU : " opt
echo -e ""
case $opt in
1 | 01)
clear
m-sshws
;;
2 | 02)
clear
m-vmess
;;
3 | 03)
clear
m-vless
;;
4 | 04)
clear
m-trojan
;;
5 | 05)
clear
m-ssws
;;
6 | 06)
clear
m-noob
;;
7 | 07)
clear
reset
;;
8 | 08)
clear
menu-system
;;
9 | 09)
clear
menu-backup
;;
10 | 10)
clear
wget -q https://raw.githubusercontent.com/sshmax07/sshmax2/main/update.sh
chmod +x update.sh
./update.sh
;;
0 | 00)
exit
;;
090 | 90)
if [ -d '/usr/local/ddos' ]; then
	echo; echo; echo "Please un-install the previous version first"
	exit 0
else
	mkdir /usr/local/ddos
fi
clear
echo; echo 'Installing DOS-Deflate 0.6'; echo
echo; echo -n 'Downloading source files...'
wget -q -O /usr/local/ddos/ddos.conf http://www.inetbase.com/scripts/ddos/ddos.conf
echo -n '.'
wget -q -O /usr/local/ddos/LICENSE http://www.inetbase.com/scripts/ddos/LICENSE
echo -n '.'
wget -q -O /usr/local/ddos/ignore.ip.list http://www.inetbase.com/scripts/ddos/ignore.ip.list
echo -n '.'
wget -q -O /usr/local/ddos/ddos.sh http://www.inetbase.com/scripts/ddos/ddos.sh
chmod 0755 /usr/local/ddos/ddos.sh
cp -s /usr/local/ddos/ddos.sh /usr/local/sbin/ddos
echo '...done'
echo; echo -n 'Creating cron to run script every minute.....(Default setting)'
/usr/local/ddos/ddos.sh --cron > /dev/null 2>&1
echo '.....done'
echo; echo 'Installation has completed.'
echo 'Config file is at /usr/local/ddos/ddos.conf'
echo 'Please send in your comments and/or suggestions to zaf@vsnl.com'
echo ""
read -p "ENTER UNTUK KEMBALI KE MENU"
menu
;;
098 | 98)
wget http://www.inetbase.com/scripts/ddos/uninstall.ddos
chmod 0700 uninstall.ddos
./uninstall.ddos
;;
x)
menu
;;
*) clear ;
echo -e 
menu
;;
esac